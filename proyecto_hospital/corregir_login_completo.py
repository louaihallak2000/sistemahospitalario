#!/usr/bin/env python3
"""
Correcci√≥n completa del sistema de login
Soluciona: formato de datos, contrase√±as y hospital_code
"""

import sqlite3
import requests
import json
from app.core.security import get_password_hash

def corregir_contrase√±as():
    """Corregir las contrase√±as con hashes de ejemplo inv√°lidos"""
    
    print("üîß CORRIGIENDO CONTRASE√ëAS EN LA BASE DE DATOS")
    print("-" * 50)
    
    try:
        conn = sqlite3.connect("hospital_db.sqlite")
        cursor = conn.cursor()
        
        # Obtener usuarios con contrase√±as de ejemplo
        cursor.execute("SELECT id, username, password_hash FROM usuarios WHERE password_hash LIKE '%ejemplo_hash%'")
        usuarios_problema = cursor.fetchall()
        
        if not usuarios_problema:
            print("‚úÖ No hay contrase√±as de ejemplo para corregir")
            conn.close()
            return True
        
        print(f"üîç Encontrados {len(usuarios_problema)} usuarios con hashes de ejemplo")
        
        # Contrase√±as por defecto por usuario
        contrase√±as_por_defecto = {
            "dr.martinez": "medico123",
            "enf.garcia": "enfermera123", 
            "enf.lopez": "enfermera123",
            "admin": "admin123"
        }
        
        for user_id, username, old_hash in usuarios_problema:
            # Obtener contrase√±a por defecto
            if username in contrase√±as_por_defecto:
                nueva_contrase√±a = contrase√±as_por_defecto[username]
            else:
                nueva_contrase√±a = "123456"  # Contrase√±a por defecto
            
            # Generar hash v√°lido
            nuevo_hash = get_password_hash(nueva_contrase√±a)
            
            # Actualizar en la base de datos
            cursor.execute(
                "UPDATE usuarios SET password_hash = ? WHERE id = ?", 
                (nuevo_hash, user_id)
            )
            
            print(f"‚úÖ {username}: Nueva contrase√±a '{nueva_contrase√±a}'")
        
        conn.commit()
        conn.close()
        
        print(f"\nüéâ {len(usuarios_problema)} contrase√±as corregidas exitosamente")
        return True
        
    except Exception as e:
        print(f"‚ùå Error corrigiendo contrase√±as: {e}")
        return False

def obtener_hospital_code():
    """Obtener el c√≥digo del hospital desde la base de datos"""
    
    try:
        conn = sqlite3.connect("hospital_db.sqlite")
        cursor = conn.cursor()
        
        cursor.execute("SELECT id FROM hospitales LIMIT 1")
        result = cursor.fetchone()
        conn.close()
        
        if result:
            return result[0]
        else:
            return "HG001"  # Por defecto
            
    except Exception as e:
        print(f"‚ö†Ô∏è  Error obteniendo hospital_code: {e}")
        return "HG001"

def test_login_corregido():
    """Probar login con el formato correcto"""
    
    print("\nüîê PROBANDO LOGIN CON FORMATO CORRECTO")
    print("-" * 50)
    
    # Obtener hospital_code
    hospital_code = obtener_hospital_code()
    print(f"üè• Hospital code: {hospital_code}")
    
    # URL del endpoint
    url = "http://localhost:8000/auth/login"
    
    # Usuarios de prueba con contrase√±as corregidas
    usuarios_prueba = [
        {
            "hospital_code": hospital_code,
            "username": "dr.martinez", 
            "password": "medico123"
        },
        {
            "hospital_code": hospital_code,
            "username": "enf.garcia",
            "password": "enfermera123"
        },
        {
            "hospital_code": hospital_code,
            "username": "admin",
            "password": "admin123"
        }
    ]
    
    print("\nüîë Probando credenciales corregidas...")
    
    login_exitoso = False
    
    for usuario in usuarios_prueba:
        try:
            response = requests.post(
                url,
                json=usuario,
                headers={"Content-Type": "application/json"},
                timeout=10
            )
            
            username = usuario["username"]
            print(f"\nüë§ Usuario: {username}")
            print(f"üìä Status: {response.status_code}")
            
            if response.status_code == 200:
                try:
                    data = response.json()
                    if "access_token" in data:
                        print(f"‚úÖ ¬°LOGIN EXITOSO!")
                        print(f"üé´ Token: {data['access_token'][:50]}...")
                        print(f"üîê Tipo: {data.get('token_type', 'bearer')}")
                        login_exitoso = True
                    else:
                        print(f"‚ö†Ô∏è  Respuesta sin token: {data}")
                except Exception as e:
                    print(f"‚ùå Error parseando respuesta: {e}")
                    print(f"üìÑ Respuesta raw: {response.text[:200]}")
                    
            elif response.status_code == 401:
                print(f"üîë Credenciales incorrectas")
                
            elif response.status_code == 422:
                print(f"üìã Error de formato:")
                try:
                    error_data = response.json()
                    print(f"   {error_data}")
                except:
                    print(f"   {response.text[:200]}")
                    
            else:
                print(f"‚ùì Error inesperado: {response.status_code}")
                print(f"üìÑ Respuesta: {response.text[:200]}")
                
        except requests.exceptions.ConnectionError:
            print(f"‚ùå Error: Backend no est√° corriendo")
            return False
            
        except Exception as e:
            print(f"‚ùå Error probando {username}: {e}")
    
    return login_exitoso

def verificar_usuarios_validos():
    """Mostrar todos los usuarios v√°lidos disponibles"""
    
    print("\nüë• USUARIOS DISPONIBLES PARA LOGIN")
    print("-" * 50)
    
    try:
        conn = sqlite3.connect("hospital_db.sqlite")
        cursor = conn.cursor()
        
        cursor.execute("""
            SELECT username, rol, password_hash 
            FROM usuarios 
            WHERE password_hash NOT LIKE '%ejemplo_hash%'
            ORDER BY rol, username
        """)
        
        usuarios = cursor.fetchall()
        conn.close()
        
        if not usuarios:
            print("‚ùå No hay usuarios con contrase√±as v√°lidas")
            return
        
        print("‚úÖ Usuarios con contrase√±as v√°lidas:")
        
        roles_passwords = {
            "medico": "medico123",
            "enfermera": "enfermera123", 
            "administrador": "admin123"
        }
        
        for username, rol, password_hash in usuarios:
            # Sugerir contrase√±a probable
            contrase√±a_sugerida = roles_passwords.get(rol, "123456")
            
            print(f"   ‚Ä¢ {username} ({rol})")
            print(f"     Contrase√±a sugerida: {contrase√±a_sugerida}")
            
    except Exception as e:
        print(f"‚ùå Error: {e}")

def main():
    """Funci√≥n principal de correcci√≥n"""
    
    print("üè• CORRECCI√ìN COMPLETA DEL SISTEMA DE LOGIN")
    print("=" * 60)
    
    # 1. Verificar que el backend est√© corriendo
    try:
        response = requests.get("http://localhost:8000/", timeout=5)
        if response.status_code != 200:
            print("‚ùå ERROR: Backend no responde correctamente")
            return
        print("‚úÖ Backend est√° corriendo")
    except requests.exceptions.ConnectionError:
        print("‚ùå ERROR: Backend no est√° corriendo")
        print("üí° SOLUCI√ìN: Ejecuta 'python iniciar_backend_corregido.py'")
        return
    
    # 2. Corregir contrase√±as
    print("\n" + "="*60)
    if not corregir_contrase√±as():
        print("‚ùå Error corrigiendo contrase√±as")
        return
    
    # 3. Probar login corregido
    print("\n" + "="*60)
    login_exitoso = test_login_corregido()
    
    # 4. Mostrar usuarios disponibles
    print("\n" + "="*60)
    verificar_usuarios_validos()
    
    # 5. Resumen final
    print("\n" + "="*60)
    if login_exitoso:
        print("üéâ ¬°LOGIN FUNCIONANDO CORRECTAMENTE!")
        print("\nüìã FORMATO CORRECTO PARA LOGIN:")
        print("""
        POST http://localhost:8000/auth/login
        Content-Type: application/json
        
        {
            "hospital_code": "HG001",
            "username": "dr.martinez",
            "password": "medico123"
        }
        """)
    else:
        print("üîß LOGIN A√öN REQUIERE AJUSTES")
        print("\nüõ†Ô∏è  PR√ìXIMOS PASOS:")
        print("1. Verificar el servicio de autenticaci√≥n")
        print("2. Revisar logs del backend para errores")
        print("3. Consultar http://localhost:8000/docs")

if __name__ == "__main__":
    main() 