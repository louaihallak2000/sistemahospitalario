#!/usr/bin/env python3
"""
Test de login con formato correcto - Sistema Hospitalario
Soluciona el error 422 de formato de datos
"""

import requests
import json

def test_login_formats():
    """Probar diferentes formatos de login hasta encontrar el correcto"""
    
    print("üîê TEST DE LOGIN - FORMATOS CORRECTOS")
    print("=" * 50)
    
    base_url = "http://localhost:8000"
    
    # Datos de prueba
    test_users = [
        {"username": "dr.martinez", "password": "123456"},
        {"username": "enf.garcia", "password": "123456"},
        {"username": "admin", "password": "admin123"}
    ]
    
    # Endpoints posibles
    endpoints = [
        "/auth/login",
        "/token", 
        "/api/v1/auth/login",
        "/login"
    ]
    
    print("üîç Probando diferentes formatos de datos...\n")
    
    for endpoint in endpoints:
        url = f"{base_url}{endpoint}"
        print(f"üì° Endpoint: {endpoint}")
        
        for user in test_users:
            username = user["username"]
            
            # Formato 1: JSON
            try:
                response = requests.post(
                    url,
                    json=user,
                    headers={"Content-Type": "application/json"},
                    timeout=5
                )
                
                print(f"   JSON - {username}: Status {response.status_code}")
                
                if response.status_code == 200:
                    try:
                        data = response.json()
                        if "access_token" in data:
                            print(f"   ‚úÖ ¬°LOGIN EXITOSO! - {username}")
                            print(f"   üìÑ Formato: JSON")
                            print(f"   üé´ Token: {data['access_token'][:50]}...")
                            print(f"   üîó URL: {url}")
                            return True
                    except:
                        pass
                elif response.status_code == 422:
                    print(f"   ‚ö†Ô∏è  JSON formato incorrecto")
                elif response.status_code == 401:
                    print(f"   üîë JSON OK - Credenciales incorrectas")
                elif response.status_code == 404:
                    print(f"   ‚ùå Endpoint no encontrado")
                else:
                    print(f"   ‚ùì JSON - Error {response.status_code}")
                    
            except requests.exceptions.ConnectionError:
                print(f"   ‚ùå No se puede conectar al backend")
                return False
            except Exception as e:
                print(f"   ‚ùå Error JSON: {str(e)[:50]}")
            
            # Formato 2: Form Data (OAuth2)
            try:
                response = requests.post(
                    url,
                    data=user,
                    headers={"Content-Type": "application/x-www-form-urlencoded"},
                    timeout=5
                )
                
                print(f"   FORM - {username}: Status {response.status_code}")
                
                if response.status_code == 200:
                    try:
                        data = response.json()
                        if "access_token" in data:
                            print(f"   ‚úÖ ¬°LOGIN EXITOSO! - {username}")
                            print(f"   üìÑ Formato: Form Data")
                            print(f"   üé´ Token: {data['access_token'][:50]}...")
                            print(f"   üîó URL: {url}")
                            return True
                    except:
                        pass
                elif response.status_code == 422:
                    print(f"   ‚ö†Ô∏è  Form formato incorrecto")
                elif response.status_code == 401:
                    print(f"   üîë Form OK - Credenciales incorrectas")
                else:
                    print(f"   ‚ùì Form - Error {response.status_code}")
                    
            except Exception as e:
                print(f"   ‚ùå Error Form: {str(e)[:50]}")
        
        print()
    
    print("‚ùå PROBLEMA: No se encontr√≥ formato de login v√°lido")
    return False

def get_user_passwords():
    """Verificar las contrase√±as reales en la base de datos"""
    
    print("\nüóÑÔ∏è  VERIFICANDO CONTRASE√ëAS EN BASE DE DATOS")
    print("-" * 50)
    
    try:
        import sqlite3
        conn = sqlite3.connect("hospital_db.sqlite")
        cursor = conn.cursor()
        
        # Obtener usuarios y sus hashes de contrase√±a
        cursor.execute("SELECT username, password_hash, rol FROM usuarios LIMIT 10")
        users = cursor.fetchall()
        
        print("üë• Usuarios en la base de datos:")
        for username, password_hash, rol in users:
            # Mostrar solo parte del hash para seguridad
            hash_preview = password_hash[:20] + "..." if len(password_hash) > 20 else password_hash
            print(f"   ‚Ä¢ {username} ({rol}) - Hash: {hash_preview}")
        
        conn.close()
        
        # Sugerir contrase√±as de prueba
        print("\nüí° SUGERENCIAS:")
        print("   Las contrase√±as est√°n hasheadas. Prueba:")
        print("   ‚Ä¢ Si es un hash simple: '123456', 'password', 'admin'")
        print("   ‚Ä¢ Si es bcrypt: necesitas saber la contrase√±a original")
        
    except Exception as e:
        print(f"‚ùå Error accediendo a BD: {e}")

def main():
    """Funci√≥n principal"""
    
    print("üè• DIAGN√ìSTICO COMPLETO DE LOGIN")
    print("=" * 60)
    
    # 1. Verificar que el backend est√© corriendo
    try:
        response = requests.get("http://localhost:8000/", timeout=5)
        if response.status_code == 200:
            print("‚úÖ Backend est√° corriendo")
        else:
            print(f"‚ö†Ô∏è  Backend responde con c√≥digo: {response.status_code}")
    except requests.exceptions.ConnectionError:
        print("‚ùå ERROR: Backend no est√° corriendo")
        print("üí° SOLUCI√ìN: Ejecuta 'python iniciar_backend_corregido.py'")
        return
    
    # 2. Probar formatos de login
    login_success = test_login_formats()
    
    # 3. Si no funciona, revisar contrase√±as
    if not login_success:
        get_user_passwords()
        
        print("\nüîß PR√ìXIMOS PASOS:")
        print("1. Verificar el endpoint de autenticaci√≥n en app/api/v1/auth.py")
        print("2. Revisar si las contrase√±as est√°n correctamente hasheadas")  
        print("3. Probar con contrase√±as conocidas")
        print("4. Verificar la documentaci√≥n en http://localhost:8000/docs")
    else:
        print("\nüéâ ¬°LOGIN FUNCIONANDO CORRECTAMENTE!")

if __name__ == "__main__":
    main() 